import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from typing import List, Dict
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_DIR = "/srv/neuroboss/logs"
MAX_LOG_SIZE = 50 * 1024 * 1024  # 50MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
MAX_LINES = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

# –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—É auto_update_simlink.sh)
CONTAINERS = [
    "infra-compose_api-service_1",
    "infra-compose_neuroboss-service_1", 
    "chroma",
    "infra-compose_rag-service_1",
    "infra-compose_agent-service_1"
]

class LogsModule:
    def __init__(self):
        self.log_dir = LOG_DIR
        
    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        for container in CONTAINERS:
            log_file = os.path.join(self.log_dir, f"{container}.log")
            status = "üü¢" if os.path.exists(log_file) else "üî¥"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {container}", 
                    callback_data=f"get_log:{container}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        keyboard.append([
            InlineKeyboardButton("üìã –í—Å–µ –ª–æ–≥–∏", callback_data="get_all_logs")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:**\n\n"
            "üü¢ - –ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "üî¥ - –ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_log_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –ª–æ–≥–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "get_all_logs":
            await self._send_all_logs(query, context)
        elif query.data.startswith("get_log:"):
            container = query.data.split(":", 1)[1]
            await self._send_container_log(query, context, container)
    
    async def _send_container_log(self, query, context, container: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        log_file = os.path.join(self.log_dir, f"{container}.log")
        
        if not os.path.exists(log_file):
            await query.edit_message_text(
                f"‚ùå –õ–æ–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container}` –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parse_mode='Markdown'
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(log_file)
            file_info = os.stat(log_file)
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
            lines = await self._read_log_tail(log_file)
            
            if not lines:
                await query.edit_message_text(
                    f"üìÑ –õ–æ–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container}` –ø—É—Å—Ç",
                    parse_mode='Markdown'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìÑ **–õ–æ–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:** `{container}`\n\n"
            message += f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            message += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {self._format_size(file_size)}\n"
            message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {self._format_time(file_info.st_mtime)}\n"
            message += f"‚Ä¢ –°—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {len(lines)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞
            log_content = "\n".join(lines)
            
            # –ï—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            if len(log_content.encode('utf-8')) > 4000:
                await self._send_log_as_file(query, context, container, log_content)
            else:
                message += f"```\n{log_content}\n```"
                await query.edit_message_text(
                    message,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞ {container}: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container}`: {str(e)}",
                parse_mode='Markdown'
            )
    
    async def _send_all_logs(self, query, context):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ª–æ–≥–∞–º"""
        message = "üìä **–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ª–æ–≥–∞–º:**\n\n"
        
        total_size = 0
        available_logs = 0
        
        for container in CONTAINERS:
            log_file = os.path.join(self.log_dir, f"{container}.log")
            
            if os.path.exists(log_file):
                file_size = os.path.getsize(log_file)
                file_info = os.stat(log_file)
                total_size += file_size
                available_logs += 1
                
                status = "üü¢"
                size_info = self._format_size(file_size)
                last_modified = self._format_time(file_info.st_mtime)
            else:
                status = "üî¥"
                size_info = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                last_modified = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            message += f"{status} **{container}**\n"
            message += f"   –†–∞–∑–º–µ—Ä: {size_info}\n"
            message += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {last_modified}\n\n"
        
        message += f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        message += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–æ–≤: {available_logs}/{len(CONTAINERS)}\n"
        message += f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self._format_size(total_size)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        keyboard = []
        for container in CONTAINERS:
            log_file = os.path.join(self.log_dir, f"{container}.log")
            status = "üü¢" if os.path.exists(log_file) else "üî¥"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {container}", 
                    callback_data=f"get_log:{container}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def _send_log_as_file(self, query, context, container: str, content: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –∫–∞–∫ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"/tmp/{container}_log.txt"
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(temp_file, 'rb') as f:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=f,
                    filename=f"{container}_log.txt",
                    caption=f"üìÑ –õ–æ–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_file)
            
            await query.edit_message_text(
                f"üìÑ –õ–æ–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ {container}: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ `{container}`: {str(e)}",
                parse_mode='Markdown'
            )
    
    async def _read_log_tail(self, log_file: str, max_lines: int = MAX_LINES) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
                return lines[-max_lines:] if len(lines) > max_lines else lines
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {log_file}: {e}")
            return []
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def _format_time(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        from datetime import datetime
        dt = datetime.fromtimestamp(timestamp)
        return dt.strftime("%d.%m.%Y %H:%M:%S")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def setup_logs_module(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –ª–æ–≥–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    logs_module = LogsModule()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(
        CallbackQueryHandler(logs_module.handle_log_callback, pattern="^get_log:")
    )
    application.add_handler(
        CallbackQueryHandler(logs_module.handle_log_callback, pattern="^get_all_logs$")
    )
    
    return logs_module

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ:
"""
from logs_module import setup_logs_module

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –ª–æ–≥–æ–≤
    logs_module = setup_logs_module(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /logs
    application.add_handler(CommandHandler("logs", logs_module.logs_command))
    
    application.run_polling()
"""
