import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.application = Application.builder().token(self.token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("hello", self.hello_command))
        self.application.add_handler(CommandHandler("time", self.time_command))
        self.application.add_handler(CommandHandler("echo", self.echo_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/hello - –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
/time - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥!
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/hello - –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º
/time - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/echo <—Ç–µ–∫—Å—Ç> - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"""
        await update.message.reply_text(help_text)
    
    async def hello_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hello"""
        user = update.effective_user
        greetings = [
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üòä",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.first_name}! üëã",
            f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! üåü",
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}! ‚ú®"
        ]
        import random
        await update.message.reply_text(random.choice(greetings))
    
    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /time"""
        from datetime import datetime
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        await update.message.reply_text(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
    
    async def echo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /echo"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")
            return
        
        text = ' '.join(context.args)
        await update.message.reply_text(f"üì¢ {text}")
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
        user = update.effective_user
        username = user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'
        last_name = user.last_name or ''
        
        info_text = f"""‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {last_name}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}
üë§ Username: @{username}

ü§ñ –ë–æ—Ç: –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –±–æ—Ç
üìÖ –í–µ—Ä—Å–∏—è: 1.0.0
üîß –§—É–Ω–∫—Ü–∏–∏: –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã

üí¨ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: 6"""
        await update.message.reply_text(info_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleBot()
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
